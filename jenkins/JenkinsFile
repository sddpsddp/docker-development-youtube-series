def pkg
def publishVersion
def label = "jenkins-slave01"

podTemplate (label: label,  containers: [
               containerTemplate(name: 'jnlp', image: 'aimvector/jenkins-slave'),
               containerTemplate(name: 'kubernetes', image: 'alpine/k8s:1.11.10', ttyEnabled: true, command: 'cat'),
             ],
volumes: [
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
]) {

  node(label) {
    def repo = checkout scm

    withEnv([
             'KUBECONFIG=/mnt/kubeconfig/kubeconfig.json'
            ]) {

      try {
        stage("Test pipeline") {
          container('kubernetes') {
            echo "testing pod template"
            sh(script: """
                echo "hello, i am CKA certified"
                echo "kkkkkk"
                
                """)
                
          }
        }

        stage("Deployment") {
           container('kubernetes') {
             echo "find . -name '*templates*' -prune -o -name '*.yaml' -exec kubectl apply -f \\{\\} \\;"
             echo "kubetnetes container"
             sh "kubectl version --short"
             sh "aws --version"
             withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws_cred', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
             sh "aws configure set aws_access_key_id  $AWS_ACCESS_KEY_ID"
             sh "aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
             sh "aws configure set default.region ${AWS_REGION}"
             sh "aws eks --region us-east-1 update-kubeconfig --name dev-security-use1-eks-cluster01"
             sh "kubectl cluster-info"
           }
          }
		     }
        }
      catch(Exception ex) { currentBuild = "FAILURE" }
      finally { 
        if (currentBuild.result == 'FAILURE') {
          office365ConnectorSend(
          message: "Build failed in project ${env.JOB_NAME}",
          status: "FAILURE",
          webhookUrl: "${env.HYPER_TEAMS_WEBHOOK}",
          color: "d31547"
          )
        }
      }
    }
  }
}
